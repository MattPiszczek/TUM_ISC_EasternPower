//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.2-147 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2013.11.07 at 03:30:54 PM CET 
//


package SC13Project.Milestone1.Warehouse.Database;

import java.util.Date;
import java.util.Iterator;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

import SC13Project.Milestone1.Warehouse.InvalidHoldingIDException;
import SC13Project.Milestone1.Warehouse.NotEnoughItemException;
import SC13Project.Milestone1.Warehouse.WarehouseWS;


/**
 * <p>Java class for WareHouse complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="WareHouse">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="items" type="{http://www.example.org/warehouse}ItemList"/>
 *         &lt;element name="holdingRequests" type="{http://www.example.org/warehouse}HoldingRequestList"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "WareHouse", propOrder = {
    "items",
    "holdingRequests"
})
public class WareHouse implements WarehouseWS {

    @XmlElement(required = true)
    protected ItemList items;
    @XmlElement(required = true)
    protected HoldingRequestList holdingRequests;

    /**
     * Gets the value of the items property.
     * 
     * @return
     *     possible object is
     *     {@link ItemList }
     *     
     */
    public ItemList getItems() {
        return items;
    }

    /**
     * Sets the value of the items property.
     * 
     * @param value
     *     allowed object is
     *     {@link ItemList }
     *     
     */
    public void setItems(ItemList value) {
        this.items = value;
    }

    /**
     * Gets the value of the holdingRequests property.
     * 
     * @return
     *     possible object is
     *     {@link HoldingRequestList }
     *     
     */
    public HoldingRequestList getHoldingRequests() {
        return holdingRequests;
    }

    /**
     * Sets the value of the holdingRequests property.
     * 
     * @param value
     *     allowed object is
     *     {@link HoldingRequestList }
     *     
     */
    public void setHoldingRequests(HoldingRequestList value) {
        this.holdingRequests = value;
    }

	@Override
	public int query(String resourceID) {
		ItemInfo item = this.itemProvider(resourceID);
		if(item != null) {
			return item.getAmount();
		}
		return 0;
	}

	@Override
	public boolean pickupItems(String resourceID, int amount)
			throws NotEnoughItemException {
		
		// TODO: Examine, reuse query vs new implementation
		
		ItemInfo item = this.itemProvider(resourceID);
		if(item != null) {
			int currentAmount = item.getAmount();
			if(currentAmount > amount) {
				// correct amount & return true
				item.setAmount(currentAmount - amount);
				return true;
			}
			else if (currentAmount == amount) {
				// delete form list & return true
				this.getItems().getItem().remove(item);
				return true;
			}
			else
			{
				throw new NotEnoughItemException();
			}
		}
		else
			System.err.println("There is no resource with givenID");
		return false;
	}

	@Override
	public int complementStock(String resourceID, int amount) {
		
		ItemInfo item;
		item = itemProvider(resourceID);
		boolean success;
		
		if(item ==  null) {
			// create new
			item = new ItemInfo();
			item.setAmount(amount);
			item.setResourceID(resourceID);
			success = this.getItems().getItem().add(item);
			if(success != true)
				item.setAmount(0);
		}
		else {
			item.setAmount(amount + item.getAmount()); 
		}
		return item.getAmount();
	}

	@Override
	public String holdItems(String resourceID, int amount)
			throws NotEnoughItemException {
		
		boolean pickupSuccess;
		
		pickupSuccess = this.pickupItems(resourceID, amount);
		if(pickupSuccess == true) {
			// Holding request ID naming convention:
			// holdingReqID : resourceID + "_" + new Date().getTime()
			Date currentTime = new Date();
			String holdingReqID = resourceID + "_" + currentTime.getTime();
			
			ItemInfo holdItem = new ItemInfo();
			holdItem.setAmount(amount);
			holdItem.setResourceID(resourceID);
			
			HoldingRequestInfo holdingReq = new HoldingRequestInfo();
			holdingReq.setRequestID(holdingReqID);
			holdingReq.setItem(holdItem);
			
			this.getHoldingRequests().getRequest().add(holdingReq);
			
			return holdingReqID;
		}
		else {
			throw new NotEnoughItemException();
		}
	}

	@Override
	public void cancelHoldingItems(String holdingID) {
		
		ItemInfo resourceItem = null;
		
		HoldingRequestInfo holdingReq;
		
		holdingReq = this.requestProvider(holdingID);
		
		if(holdingReq != null) {
			ItemInfo holdItem = holdingReq.getItem();
			resourceItem = this.itemProvider(holdItem.getResourceID());
			if(resourceItem == null) {
				resourceItem = new ItemInfo();
				resourceItem.setResourceID(holdItem.getResourceID());
				resourceItem.setAmount(holdItem.getAmount());
			}
			else {
				resourceItem.setAmount(resourceItem.getAmount() + holdItem.getAmount());
			}
			this.getHoldingRequests().getRequest().remove(holdingReq);
		}
		
	}

	@Override
	public boolean pickupHoldingItems(String holdingID)
			throws InvalidHoldingIDException {
		
		HoldingRequestInfo holdingReq;
		
		holdingReq = this.requestProvider(holdingID);
		
		if(holdingReq != null) {
			this.getHoldingRequests().getRequest().remove(holdingReq);
			return true;
		}
		else {
			throw new InvalidHoldingIDException();
		}
	}
	
	private ItemInfo itemProvider(String resourceID) {
		Iterator<ItemInfo> itemIterator = this.getItems().getItem().iterator();
		ItemInfo item = null;
		
		while(itemIterator.hasNext()) {
			item = itemIterator.next();
			if(item.getResourceID().equalsIgnoreCase(resourceID))
				break;
		}
		
		return item;
	}
	
	private HoldingRequestInfo requestProvider(String holdingID) {
		Iterator<HoldingRequestInfo> requestIterator = this.getHoldingRequests().getRequest().iterator();
		HoldingRequestInfo request = null;
		
		while(requestIterator.hasNext()) {
			request = requestIterator.next();
			if(request.getRequestID().equalsIgnoreCase(holdingID)) {
				break;
			}
		}
		
		return request;
	}

}
